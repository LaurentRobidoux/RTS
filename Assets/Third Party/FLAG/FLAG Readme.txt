
FLAG Readme
Revision: 17
Date of Revision: 26/04/2015

Copyright April 2015 Peter Martingell.
Developed by Peter Martingell / 'PrivatePirate'
Developed as part of an Undergraduate Thesis for the University of Bedfordshire

/// What is it? ///

A Kinematic formation movement system, using Position objects gotten by Agents through Tag, where one Agent type (Leader) 
	creates a group of Positions that the other Agent type (Follower) gets, and moves to.
For formations it supports multiple generation shapes (Filled Block, Diamond, Circle, Napoleon Square), as well
	as moving formation positions around in reaction to the environment (depending on tag).
  

/// Objects & Functions: ///

All objects except Obstacles use Kinematic rigid-bodies with trigger colliders, using transform.movement. 
This was chosen to allow use of updating via frames, and not fixed update.

Positions - Points that the Agents go to, depending on type, they react differently to the world:
	Path - Used for points that Leaders proceed to, reacts to world by deleting self if spawned into another object
	Formation - Used for points that Followers go to, have additional code to react to world by being moved by 
		parent Leader Agent

Agents - Actors, based on Leader/Follower, where each uses a set of 3 core scripts, described in the next section:
	Leader - Creates the formations that Followers move towards.
	Follower - Moves towards positions generated by Leaders, where if it cannot find any, sits and idles in place.

		
/// Component Structure ///

Both at minimum use these three scripts, from there differentiating:

Main - Holds Variables from which the other objects are set in various setup scripts, also ensures that
	the needed scripts are present on the GameObject through the use of "RequireComponent"
GetObject - Depending on the enumeration/tag to find set, it will find a list of unlocked positions of a script type,
	loop through and find the closest, then set that as the object to goto for other scripts to access
GotoObject - Depending on whether GetObject has an object to goto, this will proceed to move towards the position
TriggerReaction - Reaction to the world

/ Leader has 3 additional scripts to create and adjust the formation:
Create - Given values in a function call, it will for loop and generate a formation, using a public function to 
	convert array index values into a vector3 relative to the Leader's transform.
FormMove - Given a formation position to move, it will find a location free behind the formation, check if it is not
	obstructed, then move the object there, waiting a variable time to then move it back.
LdrDelObjWthnMgntd - when in close proximity to a found path position from GetObject, it will delete that object if it
	exists every variable iteration, currently acts to remove path positions when close to them, can be set to not delete.

/ Follower has a behaviour and reaction script, to affect how it moves/acts	
FlrBehaviour - If active, it will stop automatic movement when outside a certain range, and will replace it with
	a different movement type depending on the behaviour enumeration set to use by Main
FlrLockIntoForm - If the Follower has stopped moving and is close to it's position to move to, it will move into and then rotate
	to face the position, and it's rotation.
	

/// Formation ///

Formations themselves are generated and handled in two parts, both using the core idea of being represented as a 2D
  axis where the Leader is 0x,0y. This converts neatly to array space, and is how positions are generated, and then moved
  when they collide with an object and need to re-position to behind the Leader.
		- So Positive x is right of the Leader, Positive y is forward from the leader, and vice versa for negative
		- And 0,0 is on the Leader, 1,0 is 1 position right of the Leader


/// Additional Scripts ///

NavMesh<...> - These two scripts allow for the use of Navigation Meshes, without using the NavMeshAgent, integrated into the
	current component setup
LdrVirtualMain - A modified AgentMain, that is placed on a Simplified Leader. This is to be used with another, invisible, Leader
	with the full set of Ldr scripts, so as to have a visible leader followed by the formation more smoothly.
User<...> - As part of the Thesis it is required to have a playable demo, these were created to allow for a user-controlled
	camera, these can be removed without issue.
StatsGUIScript - Also part of the Thesis, to ease testing for specific variables desired, this can be removed, but read 
	Issues/Warnings first.


/// Support ///

- Multiple Generation Types
- Multiple Groups
- Multiple Leader/Follower types (Eg. Normal Leader, Followed by a mixture of Normal/NavMesh Followers)
- Basic behaviours (Eg Follower movement styles)
- Extendible Scripts (Eg. GotoObject > NavMeshGoto)
- Multiple position types
- Additional types through enums (Positions, Follower Behaviours, Leader Behaviours, Generation Styles)


/// Issues/Warnings ///

Tags
	- Tags are set in Main scripts, Position Scripts, and on the User Control scripts, they can be edited as needed.
	- For the system in development the following tags were used:
		Obstacle
		Leader
		Follower
		VirtualLeader
		PosPat
		PosFor

StatsGUIScript
	- Throughout the various scripts are calls to StatsGUIScript, this is part of the Thesis, and in most cases outside of it,
		should be removed, as without the object created many scripts will through an error trying to call it.

Formation Movement
	- As of r17 this sub-system works in that it will move formation positions around, but it does not hold them in place if they
		repeatedly trigger when moved back into position in the normal formation.
	- It also does not support movement of positions to the front of the formation, only moving from front to the back.